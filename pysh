#!/usr/bin/env python3.8

from sys import stdin, stdout
import syntax
import tty
from chars import *

STDIN_FD = 0
LINE_WIDTH = 120
MIN_LHS = 40
SEPARATOR = " ---> "
ELIDED = '...'

def get_line(f, fn):
    line = ''
    while True:
        ret = fn(line)
        c = stdin.read(1)

        if c == ENTER:
            return ret
        elif c == CTRL_C:
            raise KeyboardInterrupt
        elif c in (CTRL_D, CTRL_Z):
            raise EOFError
        elif c == BACKSPACE:
            if line:
                line = line[:-1]
        else:
            line += c

def show_line(source):
    try:
        xpiled = syntax.dumps(source)
    except SyntaxError as e:
        xpiled = "err: " + e.msg

    if xpiled:

        # if too long, truncate source
        if len(source) + len(SEPARATOR) + len(xpiled) > LINE_WIDTH:
            source = ELIDED + source[len(ELIDED) - MIN_LHS:]

            # if _still_ too long, truncate xpiled output
            if len(source) + len(SEPARATOR) + len(xpiled) > LINE_WIDTH:
                xpiled = ELIDED + xpiled[len(source) + len(SEPARATOR) + len(ELIDED) - LINE_WIDTH:]

        rhs_padding = LINE_WIDTH - len(xpiled) - len(SEPARATOR)
        print('\r', rhs_padding * ' ', SEPARATOR, xpiled, '\r', source, sep='', end='', flush=True)
    else:
        print(LINE_WIDTH * ' ', '\r', source, sep='', end='', flush=True)
    return xpiled

try:
    tty.setraw(STDIN_FD)
    while True:
        xpiled = get_line(stdin, show_line)
        # FIXME exec
        print('\r')
except (KeyboardInterrupt, EOFError):
    pass
finally:
    tty.setcbreak(STDIN_FD)
    print(end='\r', flush=True)
